HR.appController.addTemplate("backbone/templates/administration/challenge-edit-flags", function(obj) {
{
var __t, __p = "";
Array.prototype.join;
}
with (obj || {}) __p += '<div class="msL">\n  <p class="aside block-margin margin-large">Set various\n    challenge flags and parameters\n  </p>\n\n  <div class="formgroup horizontal row">\n    <div class="pull-left span5">\n      <label for="solved_score">Solved score</label>\n      <div class="left gray-text">\n        For 1 player game and challenges with custom checkers, this threshold will be used to determine solved or not. This flag is useful for various of statistics although it will not affect any score or leaderboard.\n      </div>\n    </div>\n    <div class="block span8 profile-input pull-left">\n      <div class="checkbox-container">\n        <input id="solved_score" class="hidden-checkbox" type="text" value="' + (null == (__t = _model.solved_score) ? "" :__t) + '"/>\n      </div>\n      <div class="left gray-text state hide solved_score"></div>\n      <small class="error name span12"></small>\n    </div>\n  </div>\n\n  ', 
_.each([ [ "no_compile_test", "Disable Compile & Test", "Compile and test button will not be shown" ], [ "no_custom_case", "Disable Custom Testcase", "Disable support for user added testcase" ], [ "no_process", "Disable Submission Processing", "Accept but don't process the submission" ], [ "submit_disabled", "Disable Submissions", "Don't accept any user submissions for this challenge" ], [ "public_test_cases", "Public Testcase", "Make testcases public after the contest ends" ], [ "public_solutions", "Public Solutions", "Make solutions public after the contest ends" ], [ "acm_forum", "Restricted Forum", "Participants can post questions but can't post answers. Only contest moderators will have permission to post answers. This configuration should also be set for individual challenge(s) of the contest" ] ], function(field) {
__p += '\n  <div class="formgroup horizontal row">\n    <div class="pull-left span5">\n      <label for="' + (null == (__t = field[0]) ? "" :__t) + '">' + (null == (__t = field[1]) ? "" :__t) + '</label>\n      <div class="left gray-text">' + (null == (__t = field[2]) ? "" :__t) + '</div>\n    </div>\n    <div class="block span8 profile-input pull-left">\n      <div class="checkbox-container">\n        <input id="' + (null == (__t = field[0]) ? "" :__t) + '" class="hidden-checkbox" type="checkbox"\n               ', 
_model[field[0]] && (__p += 'checked="checked"'), __p += ' />\n      </div>\n      <div class="left gray-text state hide ' + (null == (__t = field[0]) ? "" :__t) + '"></div>\n      <small class="error name span12"></small>\n    </div>\n  </div>\n  ';
}), __p += "\n</div>\n";
return __p;
});